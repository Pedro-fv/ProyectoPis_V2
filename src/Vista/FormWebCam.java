
package Vista;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.DMatch;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.videoio.VideoCapture;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.MatOfDMatch;
import org.opencv.features2d.BFMatcher;
import org.opencv.features2d.Feature2D;
import org.opencv.features2d.ORB;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class FormWebCam extends javax.swing.JPanel {
    private static VideoCapture videoCapture;
    private volatile boolean capturing;
    private Mat imagenComparar; 
    private Feature2D orbDetector;
    private Mat descriptoresComparar;
    private Mat descriptoresComparar32f;

    public FormWebCam() {
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        videoCapture = new VideoCapture(0);
        
         // Inicializar el detector ORB
        orbDetector = ORB.create();
        
        // Cargar la imagen de la mano a comparar
        imagenComparar = Imgcodecs.imread("C:\\Users\\Pedrofv\\Downloads\\ProyectoPis_2024 (2)\\ProyectoPis_2024\\FotoCaptura\\Foto_20230724233450.jpg");
        
        // Calcular los descriptores de la imagen de referencia (MANO.jpg)
        MatOfKeyPoint puntoClavesComparar = new MatOfKeyPoint(); 
        descriptoresComparar = new Mat();
        orbDetector.detectAndCompute(imagenComparar, new Mat(), puntoClavesComparar, descriptoresComparar); //Metodo detectAndCompute detecta las caracterisitcas de la imagen de referencia

        // Convertir los descriptores de la imagen de referencia a CV_32F
        descriptoresComparar32f = new Mat(); //Este objeto almacenara los descriptores de la imagen de referencia en el formato 32F
        descriptoresComparar.convertTo(descriptoresComparar32f, CvType.CV_32F); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCamara = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        btnDetener = new javax.swing.JButton();
        btnCapturar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnIniciar.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnIniciar.setText("iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnDetener.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnDetener.setText("detener");
        btnDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerActionPerformed(evt);
            }
        });

        btnCapturar.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnCapturar.setText("capturar");
        btnCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapturarActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("R");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Roboto Light", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("WebCam");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetener)
                        .addGap(17, 17, 17)
                        .addComponent(btnCapturar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(289, 289, 289)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(lblCamara, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(477, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(301, 301, 301)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(831, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lblCamara, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIniciar)
                    .addComponent(btnDetener)
                    .addComponent(btnCapturar))
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(277, 277, 277)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(472, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (!capturing) {
            capturing = true;
            Thread captureThread = new Thread(new Runnable() {
                public void run() {
                    while (capturing) {
                       
                        Mat frame = new Mat(); //Crea un objeto de tipo mat
                        videoCapture.read(frame); //Lee un fotograma y lo guarda en el objeto frame
                       
                        MatOfByte buffer = new MatOfByte(); //Se crea un objeto de tipo matofbyte este objeto guarda los byte de la imagen
                        Imgcodecs.imencode(".jpg", frame, buffer);// Convirte el fotograma al formato jpg 
                        byte[] imageBytes = buffer.toArray();//Guardar los byte codificados
                        ImageIcon imageIcon = new ImageIcon(imageBytes);//Se crea un objeto ImageIcon para poder mostrar en componentes  graficos
                        
                        // Para escalar la imagen 
                        Image image = imageIcon.getImage();//Se obtine la imagen  y se convierte en objeto
                        Image scaledImage = image.getScaledInstance(lblCamara.getWidth(), lblCamara.getHeight(),
                        Image.SCALE_SMOOTH);//Se obtine la imagen y con el metodo getScaledInstance() para escalar la imagen con los argumentos del jlabel
                        ImageIcon scaledImageIcon = new ImageIcon(scaledImage);//Se crea objeto con la imagen escalar
                        
                        // Mostrar la imagen en el JLabel
                        lblCamara.setIcon(scaledImageIcon);
                        // Esperar un tiempo antes de actualizar el siguiente fotograma
                        try {
                            Thread.sleep(30);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            captureThread.start();
        }    
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerActionPerformed
        capturing = false;

    }//GEN-LAST:event_btnDetenerActionPerformed

    private void btnCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapturarActionPerformed
          // Capturar un fotograma actual de la c√°mara
        Mat frame = new Mat();
        if (videoCapture.read(frame)) {
            try {
                // Realizar el reconocimiento de im√°genes
                ReconocimientoDeGestos(frame);
                } catch (Exception e) {
                System.err.println("Error al realizar el reconocimiento de im√°genes: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al realizar el reconocimiento de im√°genes");
            }
        } else {
            System.err.println("Error al capturar el fotograma de la c√°mara.");
            JOptionPane.showMessageDialog(null, "Error al capturar el fotograma de la c√°mara.");
        }
    }

   private void ReconocimientoDeGestos(Mat frame) {
       // Detectar caracter√≠sticas en el frame a trav√©s de ORB
        MatOfKeyPoint keyPoints = new MatOfKeyPoint();
        Mat descriptors = new Mat();
        orbDetector.detectAndCompute(frame, new Mat(), keyPoints, descriptors);

        // Comprobar que los descriptores sean v√°lidos
        if (descriptoresComparar32f.empty() || descriptors.empty()) {
            JOptionPane.showMessageDialog(null, "No se pudieron calcular los descriptores para la comparaci√≥n.");
            return;
        }

        // Convertir los descriptores del frame a CV_32F para asegurar el mismo tipo de datos
        Mat descriptors32f = new Mat();
        descriptors.convertTo(descriptors32f, CvType.CV_32F);

        // Crear un objeto BFMatcher con k=2 (dos mejores coincidencias)
        BFMatcher matcher = BFMatcher.create();
        MatOfDMatch matches = new MatOfDMatch(); //Va a almacenar las coincidencias entre  los descriptores del ftgm actual y los de los del ftgm de la imagen de referencia 
        matcher.match(descriptoresComparar32f, descriptors32f, matches);

        // Calcular la puntuaci√≥n de similitud
        double puntuacionSimilitud = 0; //Esta variable se creo para calcular la puntuaci√≥n de similitud entre los descriptores.
        //Se itera sobre la lista de coincidencias ( matches.toList()) y se acumula la distancia de cada coincidencia en la variable puntuacionSimilitud.
        for (DMatch match : matches.toList()) {
            puntuacionSimilitud += match.distance;
        }

        // Si la similitud es menor a un umbral, se considera que la mano coincide con la imagen de referencia
        double umbralSimilitud = 66000; // Entre menor sea la cantidad m√°s estricto sera la comparaci√≥n
        if (puntuacionSimilitud < umbralSimilitud) { //56000
            // Se ha detectado la se√±al de la mano
            System.out.println("Se√±al de la mano detectada.");
            JOptionPane.showMessageDialog(null, "Se√±al de la mano: abierta");

            // Redimensionar la imagen al tama√±o deseado (por ejemplo, 800x600)
            int ancho =600;
            int altura = 503;
            Size nuevoTama√±o = new Size(ancho, altura);
            Imgproc.resize(frame, frame, nuevoTama√±o);

            // Guardar el fotograma como una imagen
            String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
            String filename = "Foto_" + timestamp + ".jpg";
            String folderPath = "C:\\Users\\Pedrofv\\Downloads\\ProyectoPis_2024 (2)\\ProyectoPis_2024\\FotoCaptura\\"; // Ruta de la carpeta
            String filePath = folderPath + filename; // Ruta completa de la imagen

            // Crear la carpeta si no existe
            File folder = new File(folderPath); //Se crea un objeto File que representa la carpeta donde se almacenar√°n las im√°genes. 
            //Se verifica si la carpeta de destino ( folder) existe en el sistema de archivos utilizando el m√©todo exists(). 
            if (!folder.exists()) {
                folder.mkdirs(); // Si la carpeta no existe, se crea utilizando el m√©todo mkdirs()
            }
            
            Imgcodecs.imwrite(filePath, frame); //Esta funcion de openCV sirve para guardar el ftgm capturado como una imagen 

            System.out.println("Foto tomada: " + filename);
            System.out.println("Ruta de la imagen: " + filePath);
        } else {
            JOptionPane.showMessageDialog(null, "No se ha detectado la se√±al de la mano.");
        }
    }//GEN-LAST:event_btnCapturarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapturar;
    private javax.swing.JButton btnDetener;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblCamara;
    // End of variables declaration//GEN-END:variables
}
